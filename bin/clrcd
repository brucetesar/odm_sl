#!/usr/bin/env ruby
# frozen_string_literal: true

# Author: Bruce Tesar
# Command line program for running RCD on a file of ERCs.

# Set up the dependency environment (specified in Gemfile.lock)
require 'bundler/setup'

# The resolver adds <project>/lib to the $LOAD_PATH.
require_relative '../lib/odl/resolver'

require 'optparse'
require 'csv_input'
require 'otgeneric/erc_reader'
require 'rcd_runner'
require 'ranking_bias_all_high'
require 'otlearn/ranking_bias_some_low'
require 'otlearn/faith_low'
require 'otlearn/mark_low'

# define variables for option values
erc_filename = nil
list_options = false
ranking_bias = RankingBiasAllHigh.new # default if no option specified

# define the allowed command line options
opts = OptionParser.new
opts.on('-e FILENAME', 'ERCs filename') { |val| erc_filename = val.strip }
opts.on('-b BIAS', '--bias BIAS', 'ranking bias', '  fl = faith low',
        '  ml = mark low', '  ah = all high (DEFAULT)')\
  do |val|
    ranking_bias = if val == 'fl'
                     OTLearn::RankingBiasSomeLow.new(OTLearn::FaithLow.new)
                   elsif val == 'ml'
                     OTLearn::RankingBiasSomeLow.new(OTLearn::MarkLow.new)
                   else
                     RankingBiasAllHigh.new
                   end
  end
opts.on('-?', '-h', '--help', 'list the command line options')\
  { list_options = true }

# parse the actual command line, and report any unused arguments
rest = opts.parse(ARGV)
puts "Unused arguments: #{rest.join(', ')}" unless rest.empty?

# If the "list options" option is specified, print out the options
# to STDOUT and exit (ignore any other options).
if list_options
  puts opts.to_s
  exit(0)
end

# If list options were not required, but a filename for the ERCS
# was not provided with -e, inform the user that they must provide
# a filename, and exit.
if erc_filename.nil?
  puts 'A filename for the ERCs must be given using option -e.'
  puts 'To see all options, run: clrcd -?'
  exit(1)
end

# Read the ERCs from the specified CSV file.
infile_content = CsvInput.new(erc_filename)
ereader = OTGeneric::ErcReader.new
erc_list = ereader.arrays_to_erc_list(infile_content.headers,
                                      infile_content.data)

# Run RCD with specified ranking bias
rcd_runner = RcdRunner.new(ranking_bias)
rcd_result = rcd_runner.run_rcd(erc_list)

# Print (to STDOUT) the consistency and the hierarchy itself.
if rcd_result.consistent?
  puts 'Consistent'
else
  puts 'Inconsistent'
end
puts rcd_result.hierarchy.to_s
