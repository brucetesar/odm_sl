#!/usr/bin/env ruby
# frozen_string_literal: true

# Author: Bruce Tesar
# Command line program for running ODL.

# Set up the dependency environment (specified in Gemfile.lock)
require 'bundler/setup'

# The resolver adds <project>/lib to the $LOAD_PATH.
require_relative '../lib/odl/resolver'

require 'optparse'
require 'arg_checker'
require 'factorial_typology'
require 'otlearn/language_learning_factory'
require 'otlearn/language_learning_runner'

# define variables for option values
list_options = false
label = nil
para_bias_string = 'mark_low'
lcomp_string = 'consistent'
tcomp_string = 'ctie'
out_dir = '.' # default is current working directory

# define the allowed command line options
opts = OptionParser.new
opts.banner = 'Usage: odl SYSTEM [options]'
opts.on('-L', '--Lang LABEL', 'language label',
        'Default: entire typology') { |val| label = val }
opts.on('-p', '--para_bias BIAS', 'paradigmatic ranking bias',
        'Default: mark_low') { |val| para_bias_string = val }
opts.on('-l', '--lcomp TYPE', 'Learning compare type',
        'Default: consistent') { |val| lcomp_string = val }
opts.on('-t', '--tcomp TYPE', 'Testing compare type',
        'Default: ctie') { |val| tcomp_string = val }
opts.on('-o', '--out_dir DIR', 'output directory name',
        'Default: current working directory') { |val| out_dir = val }
opts.on('-h', '--help', 'list the command line options')\
  { list_options = true }

# parse the actual command line
rest = opts.parse(ARGV)

# If the "list options" option is specified, print out the options
# to STDOUT and exit (ignore any other options).
if list_options
  puts opts.to_s
  exit(0)
end

# Get the SYSTEM argument
system_values_string = %w[sl pas multi_stress clash_lapse].join(', ')
system_val = rest.shift
if system_val.nil?
  puts 'ERROR: missing argument for linguistic system.'
  puts "Value must be one of #{system_values_string}"
  exit(1) # return failure error code
end
# Report any unused arguments
puts "Unused arguments: #{rest.join(', ')}" unless rest.empty?

# set the linguistic system
case system_val
when 'sl'
  require 'sl/system'
  system_module = SL
when 'pas'
  require 'pas/system'
  system_module = PAS
when 'multi_stress'
  require 'multi_stress/system'
  system_module = MultiStress
when 'clash_lapse'
  require 'clash_lapse/system'
  system_module = ClashLapse
else
  puts "ERROR: invalid linguistic system #{system_val}"
  puts "Value must be one of #{system_values_string}"
  exit(1) # return failure error code
end
ling_system = system_module::System.new

# Define the possible values for certain argument types
bias_values = %w[all_high faith_low mark_low]
comp_type_values = %w[pool ctie consistent]

# Check the values of selected command line options
arg_checker = ArgChecker.new
exit(1) unless arg_checker.arg_valid?(para_bias_string, bias_values,
                                      '--para_bias')
exit(1) unless arg_checker.arg_valid?(lcomp_string, comp_type_values,
                                      '--lcomp')
exit(1) unless arg_checker.arg_valid?(tcomp_string, comp_type_values,
                                      '--tcomp')

# Convert the argument value strings to the names of corresponding
# setting methods for an OTLearn::LanguageLearningFactory.
para_bias = "para_#{para_bias_string}".to_sym
lcomp_type = "learn_#{lcomp_string}".to_sym
tcomp_type = "test_#{tcomp_string}".to_sym

# Calculate the languages of the typology.
puts "Calculating the #{system_module} typology."
competition_list = if system_val == 'clash_lapse'
                     ling_system.generate_competitions_2r1s
                   else
                     ling_system.generate_competitions_1r1s
                   end
ft_result = FactorialTypology.new(competition_list)
lang_list = ft_result.learning_data

# If a specific language was requested, find it.
unless label.nil?
  lang_list = lang_list.keep_if { |lang| lang.label == label }
  if lang_list.empty?
    puts "ERROR: language #{label} was not found in the typology."
    exit(1)
  end
end

# Configure the learner factory and build the learner
factory = OTLearn::LanguageLearningFactory.new
factory.send(para_bias)
factory.send(lcomp_type)
factory.send(tcomp_type)
factory.system = ling_system
learner = factory.build

# Run learning
if label.nil?
  puts "Learning the #{system_module} typology."
else
  puts "Learning language #{label} of the #{system_module} typology."
end
runner = OTLearn::LanguageLearningRunner.new(ling_system, learner)
runner.prep_output_dir(out_dir, '*.csv')
lang_list.each do |lang|
  result = runner.run(lang.label, lang)
  runner.write(result, out_dir: out_dir)
  puts "#{lang.label} not learned." unless result.learning_successful?
end
puts "#{system_module} learning is finished."
