#!/usr/bin/env ruby
# frozen_string_literal: true

# Author: Bruce Tesar
# Command line program for running ODL on a specified language of SL.

# The resolver adds <project>/lib to the $LOAD_PATH.
require_relative '../lib/odl/resolver'

require 'optparse'
require 'sl/system'
require 'factorial_typology'
require 'grammar'
require 'otlearn/language_learning_runner'
require 'otlearn/language_learning_factory'
require 'otlearn/language_learning_image_maker'
require 'csv_output'

# set the linguistic system
ling_system = SL::System.instance

# define variables for option values
report_filename = nil
list_options = false
para_bias_string = nil
lcomp_string = nil
tcomp_string = nil

# define the allowed command line options
opts = OptionParser.new
opts.banner = 'Usage: clodl LANGLABEL [options]'
opts.on('-r', '--report FILENAME', 'Detailed CSV report filename')\
  { |val| report_filename = val }
opts.on('-p', '--para_bias BIAS', 'paradigmatic ranking bias')\
  { |val| para_bias_string = val }
opts.on('-l', '--lcomp TYPE', 'Learning compare type')\
  { |val| lcomp_string = val }
opts.on('-t', '--tcomp TYPE', 'Testing compare type')\
  { |val| tcomp_string = val }
opts.on('-h', '--help', 'list the command line options')\
  { list_options = true }

# parse the actual command line
rest = opts.parse(ARGV)

# If the "list options" option is specified, print out the options
# to STDOUT and exit (ignore any other options).
if list_options
  puts opts.to_s
  exit(0)
end

# Get the language label argument
label = rest.shift
if label.nil?
  puts 'ERROR: missing argument for language label.'
  puts 'To see all options, run: clodl -h'
  exit(1) # return failure error code
end
# Report any unused arguments
puts "Unused arguments: #{rest.join(', ')}" unless rest.empty?

# Checks if the provided argument is missing (nil). If it is,
# print an error message including the missing option,
# and exit with an error code.
def check_required_arg(arg, option_string)
  return unless arg.nil?

  puts "ERROR: missing command line option #{option_string}."
  puts 'To see all options, run: clodl -h'
  exit(1) # return failure error code
end

# Checks if the provided argument is one of the allowed values.
# If not, print an error message, and exit with an error code.
def check_arg_value(arg, values, option_string)
  return if values.member?(arg)

  puts "ERROR: invalid #{option_string} value #{arg}."
  puts "Value must be one of #{values.join(', ')}"
  exit(1) # return failure error code
end

check_required_arg(report_filename, '--report')

bias_values = %w[all_high faith_low mark_low]
check_required_arg(para_bias_string, '--para_bias')
check_arg_value(para_bias_string, bias_values, '--para_bias')
# Prepend para_ to the bias, forming the name of the factory method.
para_bias = "para_#{para_bias_string}".to_sym

comp_type_values = %w[pool ctie consistent]
check_required_arg(lcomp_string, '--lcomp')
check_arg_value(lcomp_string, comp_type_values, '--lcomp')
# Prepend learn_ to the comp type, forming the name of the factory method.
comp_learn_type = "learn_#{lcomp_string}".to_sym

check_required_arg(tcomp_string, '--tcomp')
check_arg_value(tcomp_string, comp_type_values, '--tcomp')
# Prepend test_ to the comp type, forming the name of the factory method.
comp_test_type = "test_#{lcomp_string}".to_sym

# Generate the language typology.
competition_list = ling_system.generate_competitions_1r1s
ft_result = FactorialTypology.new(competition_list)
lang_list = ft_result.factorial_typology

# Find the requested language.
lang = lang_list.find { |l| l.label == label }
if lang.nil?
  puts "Language #{label} was not found in the typology."
  exit(1)
end
outputs = OTLearn::LanguageLearningRunner.wlp_to_learning_data(lang)

# Configure the learner factory and build the learner
factory = OTLearn::LanguageLearningFactory.new
factory.send(para_bias)
factory.send(comp_learn_type)
factory.send(comp_test_type)
factory.system = ling_system
lang_sim = factory.build

# Run learning on the language, and write the results to a file.
runner = OTLearn::LanguageLearningRunner.new(ling_system, lang_sim)
result = runner.run(label, outputs)
runner.write(result, filename: report_filename)

# Display if learning was successful to STDOUT.
if result.learning_successful?
  puts "#{label} learned."
else
  puts "#{label} not learned."
end
