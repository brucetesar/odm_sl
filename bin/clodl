#!/usr/bin/env ruby
# frozen_string_literal: true

# Author: Bruce Tesar
# Command line program for running ODL on a specified language of SL.

# The resolver adds <project>/lib to the $LOAD_PATH.
require_relative '../lib/odl/resolver'

require 'optparse'
require 'arg_checker'
require 'sl/system'
require 'factorial_typology'
require 'otlearn/language_learning_runner'
require 'otlearn/language_learning_factory'
require 'otlearn/language_learning_image_maker'

# set the linguistic system
ling_system = SL::System.instance

# define variables for option values
report_filename = nil # default determined by LanguageLearningRunner#write
list_options = false
para_bias_string = 'mark_low'
lcomp_string = 'consistent'
tcomp_string = 'ctie'

# define the allowed command line options
opts = OptionParser.new
opts.banner = 'Usage: clodl LANGLABEL [options]'
opts.on('-p', '--para_bias BIAS', 'paradigmatic ranking bias',
        'Default: mark_low') { |val| para_bias_string = val }
opts.on('-l', '--lcomp TYPE', 'Learning compare type',
        'Default: consistent') { |val| lcomp_string = val }
opts.on('-t', '--tcomp TYPE', 'Testing compare type',
        'Default: ctie') { |val| tcomp_string = val }
opts.on('-r', '--report FILENAME', 'Detailed CSV report filename',
        'Default: LANGLABEL') { |val| report_filename = val }
opts.on('-h', '--help', 'list the command line options',
        'and default values') { list_options = true }

# parse the actual command line
rest = opts.parse(ARGV)

# If the "list options" option is specified, print out the options
# to STDOUT and exit (ignore any other options).
if list_options
  puts opts.to_s
  exit(0)
end

# Get the language label argument
label = rest.shift
if label.nil?
  puts 'ERROR: missing argument for language label.'
  exit(1) # return failure error code
end
# Report any unused arguments
puts "Unused arguments: #{rest.join(', ')}" unless rest.empty?

bias_values = %w[all_high faith_low mark_low]
comp_type_values = %w[pool ctie consistent]

# Check the values of selected command line options
arg_checker = ArgChecker.new
exit(1) unless arg_checker.arg_valid?(para_bias_string, bias_values,
                                      '--para_bias')
exit(1) unless arg_checker.arg_valid?(lcomp_string, comp_type_values,
                                      '--lcomp')
exit(1) unless arg_checker.arg_valid?(tcomp_string, comp_type_values,
                                      '--tcomp')

# Convert the argument value strings to the names of corresponding
# setting methods for OTLearn::LanguageLearningFactory.
para_bias = "para_#{para_bias_string}".to_sym
lcomp_type = "learn_#{lcomp_string}".to_sym
tcomp_type = "test_#{lcomp_string}".to_sym

# Generate the language typology.
competition_list = ling_system.generate_competitions_1r1s
ft_result = FactorialTypology.new(competition_list)
lang_list = ft_result.factorial_typology

# Find the requested language.
lang = lang_list.find { |l| l.label == label }
if lang.nil?
  puts "Language #{label} was not found in the typology."
  exit(1)
end
outputs = OTLearn::LanguageLearningRunner.wlp_to_learning_data(lang)

# Configure the learner factory and build the learner
factory = OTLearn::LanguageLearningFactory.new
factory.send(para_bias)
factory.send(lcomp_type)
factory.send(tcomp_type)
factory.system = ling_system
lang_sim = factory.build

# Run learning on the language, and write the results to a file.
runner = OTLearn::LanguageLearningRunner.new(ling_system, lang_sim)
result = runner.run(label, outputs)
runner.write(result, filename: report_filename)

# Display if learning was successful to STDOUT.
if result.learning_successful?
  puts "#{label} learned."
else
  puts "#{label} not learned."
end
