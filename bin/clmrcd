#!/usr/bin/env ruby
# frozen_string_literal: true

# Author: Bruce Tesar
# Command line program for running MRCD on a file of competitions.

# The resolver adds <project>/lib to the $LOAD_PATH.
require_relative '../lib/odl/resolver'

require 'optparse'
require 'csv_input'
require 'otgeneric/comp_list_reader'
require 'otgeneric/winners_reader'
# require 'rcd_runner'

# define variables for option values
comp_filename = nil
winners_filename = nil
list_options = false

# define the allowed command line options
opts = OptionParser.new
opts.on("-c", "--comp_file FILENAME", "Competitions filename")\
  {|val| comp_filename = val.strip}
opts.on("-w", "--winner_file FILENAME", "Winners filename")\
  {|val| winners_filename = val.strip}
opts.on("-?", "-h", "--help", "list the command line options")\
  {list_options = true}

# parse the actual command line, and report any unused arguments
rest = opts.parse(ARGV)
puts "Unused arguments: #{rest.join(", ")}" unless rest.empty?

# If the "list options" option is specified, print out the options
# to STDOUT and exit (ignore any other options).
if list_options
  puts opts.to_s
  exit
end

# If list options were not required, but a filename for the competitions
# was not provided with -c, inform the user that they must provide
# a filename, and exit.
if comp_filename.nil?
  puts "A filename for the competitions must be given using option -c."
  puts "To see all options, run: clmrcd -?"
  exit
end

# If list options were not required, but a filename for the winners
# was not provided with -w, inform the user that they must provide
# a filename, and exit.
if winners_filename.nil?
  puts "A filename for the winners must be given using option -w."
  puts "To see all options, run: clmrcd -?"
  exit
end

# Read the competitions from the specified CSV file.
comp_content = CsvInput.new(comp_filename)
clreader = OTGeneric::CompListReader.new
comp_list = clreader.arrays_to_comp_list(comp_content.headers,
                                         comp_content.data)

# Read the winners form the specified CSV file.
winner_content = CsvInput.new(winners_filename)
wreader = OTGeneric::WinnersReader.new
wreader.competitions = comp_list
winner_list = wreader.convert_array_to_winners(winner_content.data)

# Run MRCD

# Print (to STDOUT) the consistency and the hierarchy itself.
puts "clmrcd is under construction."