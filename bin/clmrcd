#!/usr/bin/env ruby
# frozen_string_literal: true

# Author: Bruce Tesar
# Command line program for running MRCD on a file of competitions.

# Set up the dependency environment (specified in Gemfile.lock)
require 'bundler/setup'

# The resolver adds <project>/lib to the $LOAD_PATH.
require_relative '../lib/odl/resolver'

require 'optparse'
require 'csv_input'
require 'csv_output'
require 'otgeneric/comp_list_reader'
require 'otgeneric/winners_reader'
require 'otgeneric/system'
require 'otlearn/mrcd'
require 'comparer_factory'
require 'loser_selector_from_gen'
require 'rcd_image_maker'

# define variables for option values
comp_filename = nil
winners_filename = nil
report_filename = nil
bias_value = nil
compare_option_value = nil
list_options = false

# define the allowed command line options
opts = OptionParser.new
opts.on('-c', '--comp_file FILENAME', 'Competitions filename')\
  { |val| comp_filename = val.strip }
opts.on('-w', '--winner_file FILENAME', 'Winners filename')\
  { |val| winners_filename = val.strip }
opts.on('-b', '--bias BIAS', 'ranking bias', '  fl = faith low',
        '  ml = mark low', '  ah = all high (DEFAULT)')\
  { |val| bias_value = val }
opts.on('-l', '--loser_selection TYPE', 'Type of loser selection',
        '  pool', '  ctie', '  consistent')\
  { |val| compare_option_value = val }
opts.on('-r', '--report FILENAME', 'Detailed CSV report filename')\
  { |val| report_filename = val }
opts.on('-?', '-h', '--help', 'list the command line options')\
  { list_options = true }

# parse the actual command line, and report any unused arguments
rest = opts.parse(ARGV)
puts "Unused arguments: #{rest.join(', ')}" unless rest.empty?

# If the "list options" option is specified, print out the options
# to STDOUT and exit (ignore any other options).
if list_options
  puts opts.to_s
  exit(0)
end

# If list options were not required, but a filename for the competitions
# was not provided with -c, inform the user that they must provide
# a filename, and exit.
if comp_filename.nil?
  puts 'A filename for the competitions must be given using option -c.'
  puts 'To see all options, run: clmrcd -h'
  exit(1) # return failure error code
end

# If list options were not required, but a filename for the winners
# was not provided with -w, inform the user that they must provide
# a filename, and exit.
if winners_filename.nil?
  puts 'A filename for the winners must be given using option -w.'
  puts 'To see all options, run: clmrcd -h'
  exit(1) # return failure error code
end

# Create a comparer factory
comp_factory = ComparerFactory.new

# Set the comparer factory to use the bias specified by the command line.
if bias_value == 'fl'
  comp_factory.faith_low
elsif bias_value == 'ml'
  comp_factory.mark_low
elsif bias_value == 'ah' || bias_value.nil?
  comp_factory.all_high
else
  puts "Invalid bias value #{bias_value}"
  exit(1) # return failure error code
end

# Set the comparer factory to use the compare option from the command line.
if compare_option_value == 'pool'
  comp_factory.pool
elsif compare_option_value == 'ctie'
  comp_factory.ctie
elsif compare_option_value == 'consistent'
  comp_factory.consistent
elsif compare_option_value.nil?
  puts 'Must specify a valid loser selection type with -l'
  exit(1) # return failure error code
else
  puts "Invalid loser selection type #{compare_option_value}"
  exit(1) # return failure error code
end

# Read the competitions from the specified CSV file.
comp_content = CsvInput.new(comp_filename)
clreader = OTGeneric::CompListReader.new
comp_list = clreader.arrays_to_comp_list(comp_content.headers,
                                         comp_content.data)

# Read the winners form the specified CSV file.
winner_content = CsvInput.new(winners_filename)
wreader = OTGeneric::WinnersReader.new
wreader.competitions = comp_list
winner_list = wreader.convert_array_to_winners(winner_content.data)

# Create a comparer object with the factory settings.
comparer = comp_factory.build

# Construct Loser Selector
system = OTGeneric::System.new(comp_list)
loser_selector = LoserSelectorFromGen.new(system, comparer)

# Run MRCD
erc_list = ErcList.new(system.constraints)
mrcd_result = OTLearn::Mrcd.new(winner_list, erc_list, loser_selector)

# Print (to STDOUT) the consistency and the hierarchy itself.
if mrcd_result.consistent?
  puts 'Consistent'
else
  puts 'Inconsistent'
end
rcd_result = comp_factory.rcd_runner.run_rcd(mrcd_result.erc_list)
puts rcd_result.hierarchy.to_s

# If a report filename was given, write a CSV image of the support
# to that file.
unless report_filename.nil?
  image_maker = RcdImageMaker.new
  report_image = image_maker.get_image(rcd_result)
  csv_output = CsvOutput.new(report_image)
  csv_output.write_to_file(report_filename)
end
